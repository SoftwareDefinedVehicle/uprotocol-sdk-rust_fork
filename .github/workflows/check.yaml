# ********************************************************************************
#  Copyright (c) 2024 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  SPDX-License-Identifier: Apache-2.0
# *******************************************************************************/

# Comprehensive combination of checks, linting, feature-checks, testing to be run on merge and on PR
# Upload test results for potential re-use in publication workflow, returns the corresponding download URL as an output on workflow_call

name: Cargo

on:
  push:
    branches: 
      - main
  pull_request:
    paths:
      - "src/**"
      - "tests/**"
      - "Cargo.*"
      - "build.rs"
      - "deny.toml"
  workflow_call:
    outputs:
      test_results_url:
        description: "URL of the test results artifact"
        value: ${{ jobs.nextest.outputs.test_results_url }}
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  RUST_TOOLCHAIN: ${{ vars.RUST_TOOLCHAIN || 'stable' }}
  RUSTFLAGS: -Dwarnings
  CARGO_TERM_COLOR: always

jobs:
  deny:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: "recursive"
    - uses: EmbarkStudios/cargo-deny-action@v2
      with: 
        rust-version: ${{ env.RUST_TOOLCHAIN }}
        command: check
        arguments: --all-features

  # [impl->req~up-language-ci-build~1]
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: "recursive"
    - uses: dtolnay/rust-toolchain@master
      with: 
        toolchain: ${{ env.RUST_TOOLCHAIN }}
    - name: Run cargo check
      run: |
        cargo check --workspace --all-targets --all-features

  # [impl->req~up-language-ci-linter~1]
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@master
        with: 
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt
      - name: Run cargo fmt
        run: |
          cargo fmt --all --check

  # [impl->req~up-language-ci-linter~1]
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@master
        with: 
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy
      - name: Run cargo clippy
        run: |
          cargo clippy --version
          cargo clippy --all-targets --all-features --no-deps -- -W warnings -D warnings

  # [impl->req~up-language-ci-api-docs~1]
  docu:
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@master
        with: 
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - name: Run rustdoc
        run: |
          cargo doc --no-deps --all-features

  feature-check:
    # Comprehensive check on dependencies for all feature flag combinations, excluding development dependencies
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@master
        with: 
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-hack
      - name: Run cargo hack powerset
        run: |
          cargo hack check --feature-powerset --no-dev-deps

  # [impl->req~up-language-ci-test~1]
  test:
    # Subset of feature-combos, on only one OS - more complete testing in test-featurematrix.yaml
    outputs:
      test_results_url: ${{ steps.test_results.outputs.artifact-url }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature-flags: ["", "--no-default-features", "--all-features"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: dtolnay/rust-toolchain@master
        with: 
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Run lib tests
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/target
          RUSTC_BOOTSTRAP=1 cargo test --no-fail-fast --lib ${{ matrix.feature-flags }} -- -Z unstable-options --format junit --report-time > ${GITHUB_WORKSPACE}/target/lib-test-results.xml
      - name: Run doc tests
        run: |
          RUSTC_BOOTSTRAP=1 cargo test --no-fail-fast --doc ${{ matrix.feature-flags }} -- -Z unstable-options --format junit --report-time > ${GITHUB_WORKSPACE}/target/doc-test-results.xml
      - name: Run TCK tests
        run: |
          # the Cucumber based tests write a results file in JUnit format to "tck-[test_name]-results.xml"
          cargo test --no-fail-fast --test 'tck_*' ${{ matrix.feature-flags }} -- --junit-out-folder=${GITHUB_WORKSPACE}/target

      - name: Upload all-features test results artifact
        id: test_results
        if: matrix.feature-flags == '--all-features'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          # include all test result files
          path: target/*-results.xml
